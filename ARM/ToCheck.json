{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "environmentName": {
            "type": "String",
            "metadata": {
                "description": "Name of the Container Apps Environment"
            }
        },
        "location": {
            "defaultValue": "[resourceGroup().location]",
            "type": "String",
            "metadata": {
                "description": "Location for all resources"
            }
        },
        "useHttpIngress": {
            "defaultValue": false,
            "type": "Bool",
            "metadata": {
                "description": "Enable HTTP/HTTPS ingress"
            }
        },
        "vnetAddressPrefix": {
            "defaultValue": "10.0.0.0/16",
            "type": "String",
            "metadata": {
                "description": "Address space for virtual network"
            }
        },
        "caSubnetPrefix": {
            "defaultValue": "10.0.0.0/23",
            "type": "String",
            "metadata": {
                "description": "Subnet prefix for Container Apps"
            }
        },
        "vmSubnetPrefix": {
            "defaultValue": "10.0.2.0/24",
            "type": "String",
            "metadata": {
                "description": "Subnet prefix for Virtual Machines"
            }
        },
        "adminUsername": {
            "type": "String",
            "metadata": {
                "description": "Username for the Virtual Machine"
            }
        },
        "adminPassword": {
            "type": "SecureString",
            "metadata": {
                "description": "Password for the Virtual Machine"
            }
        },
        "vmSize": {
            "defaultValue": "Standard_D2s_v3",
            "type": "String",
            "metadata": {
                "description": "Size of the Virtual Machine"
            }
        },
        "osType": {
            "defaultValue": "Ubuntu2204",
            "allowedValues": [
                "Ubuntu2204",
                "Windows2022"
            ],
            "type": "String",
            "metadata": {
                "description": "Type of OS for the Virtual Machine"
            }
        },
        "LOCAL_PORT1": {
            "defaultValue": "8080",
            "type": "String",
            "metadata": {
                "description": "Local port 1 (mandatory)"
            }
        },
        "functionAppName": {
            "type": "String",
            "defaultValue": "[concat(parameters('environmentName'), '-startvm-func')]",
            "metadata": {
                "description": "Name of the Function App"
            }
        },
        "storageAccountName": {
            "type": "String",
            "defaultValue": "[concat('stor', uniqueString(resourceGroup().id))]",
            "metadata": {
                "description": "Storage Account for Function App"
            }
        },
        "functionAppServicePlanName": {
            "type": "String",
            "defaultValue": "[concat(parameters('environmentName'), '-func-plan')]",
            "metadata": {
                "description": "Name of App Service Plan for Function App"
            }
        }
    },
    "variables": {
        "appName": "[concat(parameters('environmentName'), '-app')]",
        "vnetName": "[concat(parameters('environmentName'), '-vnet')]",
        "vmName": "[concat(parameters('environmentName'), '-vm01')]",
        "nicName": "[concat(variables('vmName'), '-nic')]",
        "caSubnetName": "CA-subnet",
        "vmSubnetName": "VM-subnet",
        "imageReference": {
            "Ubuntu2204": {
                "publisher": "Canonical",
                "offer": "0001-com-ubuntu-server-jammy",
                "sku": "22_04-lts-gen2",
                "version": "latest"
            },
            "Windows2022": {
                "publisher": "MicrosoftWindowsServer",
                "offer": "WindowsServer",
                "sku": "2022-Datacenter",
                "version": "latest"
            }
        },
        "defaultIngress": {
            "external": true,
            "targetPort": "[int(parameters('LOCAL_PORT1'))]",
            "exposedPort": "[int(parameters('LOCAL_PORT1'))]",
            "transport": "Tcp",
            "traffic": [
                {
                    "weight": 100,
                    "latestRevision": true
                }
            ]
        },
        "httpIngress": {
            "external": true,
            "targetPort": "[int(parameters('LOCAL_PORT1'))]",
            "transport": "auto",
            "allowInsecure": true
        },
        "roleDefinitionId": "b24988ac-6180-42a0-ab88-20f7382dd24c",
        "readerRoleDefinitionId": "acdd72a7-3385-48ef-bd42-f606fba81ae7",
        "vmRoleAssignmentName": "[guid(resourceId('Microsoft.Compute/virtualMachines', variables('vmName')), variables('roleDefinitionId'), resourceId('Microsoft.Web/sites', parameters('functionAppName')))]",
        "caRoleAssignmentName": "[guid(resourceId('Microsoft.App/containerApps', variables('appName')), variables('readerRoleDefinitionId'), resourceId('Microsoft.Web/sites', parameters('functionAppName')))]"
    },
"resources": [
        {
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2023-05-01",
            "name": "[variables('vnetName')]",
            "location": "[parameters('location')]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[parameters('vnetAddressPrefix')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('caSubnetName')]",
                        "properties": {
                            "addressPrefix": "[parameters('caSubnetPrefix')]"
                        }
                    },
                    {
                        "name": "[variables('vmSubnetName')]",
                        "properties": {
                            "addressPrefix": "[parameters('vmSubnetPrefix')]"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2023-05-01",
            "name": "[variables('nicName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('vmSubnetName'))]"
                            },
                            "privateIPAllocationMethod": "Dynamic"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "2023-07-01",
            "name": "[variables('vmName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]"
            ],
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[parameters('vmSize')]"
                },
                "osProfile": {
                    "computerName": "[variables('vmName')]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPassword')]"
                },
                "storageProfile": {
                    "imageReference": "[variables('imageReference')[parameters('osType')]]",
                    "osDisk": {
                        "createOption": "FromImage",
                        "managedDisk": {
                            "storageAccountType": "Premium_LRS"
                        }
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]"
                        }
                    ]
                }
            }
        },
{
            "type": "Microsoft.App/managedEnvironments",
            "apiVersion": "2023-05-01",
            "name": "[concat(parameters('environmentName'), '-vnet')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
            ],
            "sku": {
                "name": "Consumption"
            },
            "properties": {
                "zoneRedundant": false,
                "vnetConfiguration": {
                    "infrastructureSubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('caSubnetName'))]",
                    "internal": false
                }
            }
        },
        {
            "type": "Microsoft.App/containerApps",
            "apiVersion": "2023-05-01",
            "name": "[variables('appName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.App/managedEnvironments', concat(parameters('environmentName'), '-vnet'))]",
                "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]"
            ],
            "properties": {
                "managedEnvironmentId": "[resourceId('Microsoft.App/managedEnvironments', concat(parameters('environmentName'), '-vnet'))]",
                "configuration": {
                    "activeRevisionsMode": "Single",
                    "ingress": "[if(parameters('useHttpIngress'), variables('httpIngress'), variables('defaultIngress'))]"
                },
                "template": {
                    "containers": [
                        {
                            "name": "app",
                            "image": "mafamafa/haproxy-env-config:202501271157",
                            "env": [
                                {
                                    "name": "LOCAL_PORT1",
                                    "value": "[if(not(parameters('useHttpIngress')), parameters('LOCAL_PORT1'), '')]"
                                },
                                {
                                    "name": "BACKEND_HOST1",
                                    "value": "[if(not(parameters('useHttpIngress')), concat(reference(variables('nicName')).ipConfigurations[0].properties.privateIPAddress, ':', parameters('LOCAL_PORT1')), '')]"
                                },
                                {
                                    "name": "LOCAL_PORT6",
                                    "value": "[if(parameters('useHttpIngress'), parameters('LOCAL_PORT1'), '')]"
                                },
                                {
                                    "name": "BACKEND_HOST6",
                                    "value": "[if(parameters('useHttpIngress'), concat(reference(variables('nicName')).ipConfigurations[0].properties.privateIPAddress, ':', parameters('LOCAL_PORT1')), '')]"
                                },
                                {
                                    "name": "WEBHOOKAFTERSTART",
                                    "value": "[concat('https://', reference(resourceId('Microsoft.Web/sites', parameters('functionAppName'))).defaultHostName, '/api/StartVM?code=', listKeys(concat(resourceId('Microsoft.Web/sites', parameters('functionAppName')), '/host/default'), '2018-11-01').functionKeys.default)]"
                                }
                            ],
                            "resources": {
                                "cpu": "0.5",
                                "memory": "1Gi"
                            }
                        }
                    ],
                    "scale": {
                        "minReplicas": 0,
                        "maxReplicas": 1
                    }
                }
            }
        },
{
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2022-09-01",
            "name": "[parameters('storageAccountName')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Standard_LRS"
            },
            "kind": "StorageV2",
            "properties": {
                "supportsHttpsTrafficOnly": true,
                "minimumTlsVersion": "TLS1_2"
            }
        },
        {
            "type": "Microsoft.Web/serverfarms",
            "apiVersion": "2022-03-01",
            "name": "[parameters('functionAppServicePlanName')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Y1",
                "tier": "Dynamic",
                "size": "Y1",
                "family": "Y",
                "capacity": 0
            },
            "properties": {},
            "kind": "windows"
        },
        {
            "type": "Microsoft.Web/sites",
            "apiVersion": "2022-03-01",
            "name": "[parameters('functionAppName')]",
            "location": "[parameters('location')]",
            "kind": "functionapp",
            "identity": {
                "type": "SystemAssigned"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', parameters('functionAppServicePlanName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
            ],
            "properties": {
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', parameters('functionAppServicePlanName'))]",
                "siteConfig": {
                    "appSettings": [
                        {
                            "name": "AzureWebJobsStorage",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', parameters('storageAccountName'), ';EndpointSuffix=', environment().suffixes.storage, ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2022-09-01').keys[0].value)]"
                        },
                        {
                            "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', parameters('storageAccountName'), ';EndpointSuffix=', environment().suffixes.storage, ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2022-09-01').keys[0].value)]"
                        },
                        {
                            "name": "WEBSITE_CONTENTSHARE",
                            "value": "[toLower(parameters('functionAppName'))]"
                        },
                        {
                            "name": "FUNCTIONS_EXTENSION_VERSION",
                            "value": "~4"
                        },
                        {
                            "name": "FUNCTIONS_WORKER_RUNTIME",
                            "value": "dotnet"
                        },
                        {
                            "name": "RESOURCE_GROUP",
                            "value": "[resourceGroup().name]"
                        },
                        {
                            "name": "VM_NAME",
                            "value": "[variables('vmName')]"
                        },
                        {
                            "name": "CONTAINER_APP_NAME",
                            "value": "[variables('appName')]"
                        },
                        {
                            "name": "SUBSCRIPTION_ID",
                            "value": "[subscription().subscriptionId]"
                        }
                    ],
                    "netFrameworkVersion": "v6.0"
                },
                "httpsOnly": true
            },
            "resources": []
        },
{
            "type": "Microsoft.Web/sites/functions",
            "apiVersion": "2022-03-01",
            "name": "[concat(parameters('functionAppName'), '/StartVM')]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]"
            ],
            "properties": {
                "config": {
                    "bindings": [
                        {
                            "authLevel": "function",
                            "type": "httpTrigger",
                            "direction": "in",
                            "name": "req",
                            "methods": [
                                "get",
                                "post"
                            ]
                        },
                        {
                            "type": "http",
                            "direction": "out",
                            "name": "response"
                        }
                    ]
                },
                "files": {
                    "run.csx": "using System;\nusing System.Net.Http;\nusing System.Net.Http.Headers;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Logging;\nusing Newtonsoft.Json;\nusing System.Text;\n\npublic static async Task<IActionResult> Run(HttpRequest req, ILogger log)\n{\n    log.LogInformation(\"Starting VM function executed\");\n    \n    try\n    {\n        // Get environment variables\n        string resourceGroup = Environment.GetEnvironmentVariable(\"RESOURCE_GROUP\");\n        string vmName = Environment.GetEnvironmentVariable(\"VM_NAME\");\n        string subscriptionId = Environment.GetEnvironmentVariable(\"WEBSITE_OWNER_NAME\").Split('+')[0];\n        \n        // Use DefaultAzureCredential simplified approach\n        string url = $\"https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/virtualMachines/{vmName}/start?api-version=2023-03-01\";\n        \n        using (var client = new HttpClient())\n        {\n            // Get token from MSI endpoint\n            var idEndpoint = Environment.GetEnvironmentVariable(\"IDENTITY_ENDPOINT\");\n            var idHeader = Environment.GetEnvironmentVariable(\"IDENTITY_HEADER\");\n            \n            // Log MSI environment info for debugging\n            log.LogInformation($\"Identity Endpoint: {idEndpoint != null}\");\n            log.LogInformation($\"Identity Header: {idHeader != null}\");\n            \n            // Get token\n            using (var tokenRequest = new HttpRequestMessage(HttpMethod.Get, \n                $\"{idEndpoint}?resource=https://management.azure.com&api-version=2019-08-01\"))\n            {\n                tokenRequest.Headers.Add(\"X-IDENTITY-HEADER\", idHeader);\n                \n                var tokenResponse = await client.SendAsync(tokenRequest);\n                string tokenJson = await tokenResponse.Content.ReadAsStringAsync();\n                \n                // Log token response status\n                log.LogInformation($\"Token request status: {tokenResponse.StatusCode}\");\n                \n                if (!tokenResponse.IsSuccessStatusCode)\n                {\n                    log.LogError($\"Token error: {tokenJson}\");\n                    return new ContentResult { \n                        Content = $\"Failed to get token: {tokenResponse.StatusCode}\", \n                        StatusCode = 500 \n                    };\n                }\n                \n                // Parse token\n                var tokenData = JsonConvert.DeserializeObject<dynamic>(tokenJson);\n                string accessToken = tokenData.access_token;\n                \n                // Start VM\n                using (var vmRequest = new HttpRequestMessage(HttpMethod.Post, url))\n                {\n                    vmRequest.Headers.Authorization = new AuthenticationHeaderValue(\"Bearer\", accessToken);\n                    var response = await client.SendAsync(vmRequest);\n                    \n                    string content = await response.Content.ReadAsStringAsync();\n                    log.LogInformation($\"VM start response: {response.StatusCode}\");\n                    \n                    if (response.IsSuccessStatusCode)\n                    {\n                        return new OkObjectResult($\"VM {vmName} start initiated successfully\");\n                    }\n                    else\n                    {\n                        log.LogError($\"VM start error: {content}\");\n                        return new ContentResult { \n                            Content = $\"Failed to start VM: {content}\", \n                            StatusCode = (int)response.StatusCode \n                        };\n                    }\n                }\n            }\n        }\n    }\n    catch (Exception ex)\n    {\n        log.LogError($\"Exception: {ex.Message}\");\n        log.LogError($\"Stack trace: {ex.StackTrace}\");\n        return new ContentResult { \n            Content = $\"Error: {ex.Message}\", \n            StatusCode = 500 \n        };\n    }\n}",
                    "function.proj": "<Project Sdk=\"Microsoft.NET.Sdk\">\n  <PropertyGroup>\n    <TargetFramework>netstandard2.0</TargetFramework>\n  </PropertyGroup>\n  <ItemGroup>\n    <PackageReference Include=\"Microsoft.NET.Sdk.Functions\" Version=\"3.0.13\" />\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"13.0.1\" />\n  </ItemGroup>\n</Project>"
                }
            }
        },
{
            "type": "Microsoft.Web/sites/functions",
            "apiVersion": "2022-03-01",
            "name": "[concat(parameters('functionAppName'), '/AutoStopVM')]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]"
            ],
            "properties": {
                "config": {
                    "bindings": [
                        {
                            "name": "myTimer",
                            "type": "timerTrigger",
                            "direction": "in",
                            "schedule": "0 */15 * * * *"
                        }
                    ]
                },
                "files": {
                    "run.csx": "#r \"Newtonsoft.Json\"\n#r \"System.Net.Http\"\n\nusing System;\nusing System.Net.Http;\nusing System.Net.Http.Headers;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Logging;\nusing Newtonsoft.Json;\nusing Newtonsoft.Json.Linq;\nusing System.Text;\n\npublic static async Task Run(TimerInfo myTimer, ILogger log)\n{\n    log.LogInformation($\"AutoStopVM function executed at: {DateTime.Now}\");\n    \n    try\n    {\n        // Get environment variables\n        string resourceGroup = Environment.GetEnvironmentVariable(\"RESOURCE_GROUP\");\n        string vmName = Environment.GetEnvironmentVariable(\"VM_NAME\");\n        string containerAppName = Environment.GetEnvironmentVariable(\"CONTAINER_APP_NAME\");\n        string subscriptionId = Environment.GetEnvironmentVariable(\"SUBSCRIPTION_ID\") ?? \n                               Environment.GetEnvironmentVariable(\"WEBSITE_OWNER_NAME\")?.Split('+')[0];\n        \n        // Check if valid subscription ID is available\n        if (string.IsNullOrEmpty(subscriptionId))\n        {\n            log.LogError(\"No valid subscription ID found in environment variables\");\n            return;\n        }\n        \n        // Get access token for ARM API\n        string accessToken = await GetAccessToken(log);\n        if (string.IsNullOrEmpty(accessToken))\n        {\n            log.LogError(\"Failed to get access token\");\n            return;\n        }\n        \n        // Check container app scaling status\n        bool isScaledToZero = await IsContainerAppScaledToZero(subscriptionId, resourceGroup, containerAppName, accessToken, log);\n        \n        if (isScaledToZero)\n        {\n            log.LogInformation($\"Container app {containerAppName} is scaled to zero. Stopping VM {vmName}.\");\n            \n            // Stop the VM\n            await StopVirtualMachine(subscriptionId, resourceGroup, vmName, accessToken, log);\n        }\n        else\n        {\n            log.LogInformation($\"Container app {containerAppName} is not scaled to zero. VM {vmName} will continue running.\");\n        }\n    }\n    catch (Exception ex)\n    {\n        log.LogError($\"Error in AutoStopVM function: {ex.Message}\");\n        log.LogError($\"Stack trace: {ex.StackTrace}\");\n    }\n}\n\nprivate static async Task<string> GetAccessToken(ILogger log)\n{\n    try\n    {\n        var idEndpoint = Environment.GetEnvironmentVariable(\"IDENTITY_ENDPOINT\");\n        var idHeader = Environment.GetEnvironmentVariable(\"IDENTITY_HEADER\");\n        \n        if (string.IsNullOrEmpty(idEndpoint) || string.IsNullOrEmpty(idHeader))\n        {\n            log.LogError(\"Managed identity endpoint or header not found\");\n            return null;\n        }\n        \n        using (var client = new HttpClient())\n        {\n            using (var request = new HttpRequestMessage(HttpMethod.Get, \n                $\"{idEndpoint}?resource=https://management.azure.com&api-version=2019-08-01\"))\n            {\n                request.Headers.Add(\"X-IDENTITY-HEADER\", idHeader);\n                \n                var response = await client.SendAsync(request);\n                string content = await response.Content.ReadAsStringAsync();\n                \n                if (!response.IsSuccessStatusCode)\n                {\n                    log.LogError($\"Failed to get token: {response.StatusCode}, {content}\");\n                    return null;\n                }\n                \n                var tokenData = JsonConvert.DeserializeObject<dynamic>(content);\n                return tokenData.access_token;\n            }\n        }\n    }\n    catch (Exception ex)\n    {\n        log.LogError($\"Error getting access token: {ex.Message}\");\n        return null;\n    }\n}\n\nprivate static async Task<bool> IsContainerAppScaledToZero(string subscriptionId, string resourceGroup, \n    string containerAppName, string accessToken, ILogger log)\n{\n    try\n    {\n        // First, let's check the Container App status via the primary API endpoint\n        string url = $\"https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.App/containerApps/{containerAppName}?api-version=2023-05-01\";\n        \n        using (var client = new HttpClient())\n        {\n            using (var request = new HttpRequestMessage(HttpMethod.Get, url))\n            {\n                request.Headers.Authorization = new AuthenticationHeaderValue(\"Bearer\", accessToken);\n                \n                var response = await client.SendAsync(request);\n                string content = await response.Content.ReadAsStringAsync();\n                \n                if (!response.IsSuccessStatusCode)\n                {\n                    log.LogError($\"Failed to get container app info: {response.StatusCode}, {content}\");\n                    return false;\n                }\n                \n                // Log full response for debugging (careful with sensitive data in production)\n                log.LogInformation($\"Container app API full response: {content}\");\n                \n                // Parse the response\n                var appData = JObject.Parse(content);\n                \n                // Try different approaches to determine if scaled to zero\n                \n                // Approach 1: Check if provisioning state is Succeeded and no replicas are reported\n                string provisioningState = appData[\"properties\"]?[\"provisioningState\"]?.ToString();\n                log.LogInformation($\"Provisioning state: {provisioningState}\");\n                \n                // Approach 2: Check if scale rules indicate it's scaled to zero\n                var minReplicas = appData[\"properties\"]?[\"template\"]?[\"scale\"]?[\"minReplicas\"]?.Value<int>();\n                var maxReplicas = appData[\"properties\"]?[\"template\"]?[\"scale\"]?[\"maxReplicas\"]?.Value<int>();\n                log.LogInformation($\"Scale settings - minReplicas: {minReplicas}, maxReplicas: {maxReplicas}\");\n                \n                // Approach 3: Check specific revision status\n                string latestRevision = appData[\"properties\"]?[\"latestRevisionName\"]?.ToString();\n                log.LogInformation($\"Latest revision: {latestRevision}\");\n                \n                // Let's try another approach - get revision info directly\n                if (!string.IsNullOrEmpty(latestRevision))\n                {\n                    string revisionUrl = $\"https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.App/containerApps/{containerAppName}/revisions/{latestRevision}?api-version=2023-05-01\";\n                    \n                    using (var revisionRequest = new HttpRequestMessage(HttpMethod.Get, revisionUrl))\n                    {\n                        revisionRequest.Headers.Authorization = new AuthenticationHeaderValue(\"Bearer\", accessToken);\n                        \n                        var revisionResponse = await client.SendAsync(revisionRequest);\n                        string revisionContent = await revisionResponse.Content.ReadAsStringAsync();\n                        \n                        if (revisionResponse.IsSuccessStatusCode)\n                        {\n                            log.LogInformation($\"Revision API response: {revisionContent}\");\n                            var revisionData = JObject.Parse(revisionContent);\n                            var revisionReplicaCount = revisionData[\"properties\"]?[\"replicas\"]?.Value<int>();\n                            log.LogInformation($\"Revision replica count: {revisionReplicaCount}\");\n                            \n                            if (revisionReplicaCount.HasValue && revisionReplicaCount.Value == 0)\n                            {\n                                return true;\n                            }\n                        }\n                    }\n                }\n                \n                // Approach 4: Directly search for \"replicas\" property anywhere in the JSON\n                bool foundZeroReplicas = FindPropertyWithValue(appData, \"replicas\", 0);\n                log.LogInformation($\"Found zero replicas directly in JSON: {foundZeroReplicas}\");\n                \n                // As a final check, look for any sign of scaling to zero in the JSON\n                bool hasScaleToZeroIndicator = \n                    (provisioningState == \"Succeeded\" && minReplicas == 0) ||\n                    foundZeroReplicas ||\n                    content.Contains(\"\\\"replicas\\\":0\") ||\n                    content.Contains(\"\\\"replicaCount\\\":0\") ||\n                    content.Contains(\"\\\"scale to 0\\\"\") ||\n                    content.Contains(\"\\\"scaled to zero\\\"\");\n                \n                log.LogInformation($\"Scale to zero indicator found: {hasScaleToZeroIndicator}\");\n                \n                return hasScaleToZeroIndicator;\n            }\n        }\n    }\n    catch (Exception ex)\n    {\n        log.LogError($\"Error checking container app scale status: {ex.Message}\");\n        log.LogError($\"Stack trace: {ex.StackTrace}\");\n        return false;\n    }\n}\n\n// Helper method to find a property with a specific value anywhere in the JSON\nprivate static bool FindPropertyWithValue(JToken token, string propertyName, int value)\n{\n    if (token is JObject obj)\n    {\n        foreach (var property in obj.Properties())\n        {\n            if (property.Name.Equals(propertyName, StringComparison.OrdinalIgnoreCase) && \n                property.Value.Type == JTokenType.Integer &&\n                property.Value.Value<int>() == value)\n            {\n                return true;\n            }\n            \n            if (FindPropertyWithValue(property.Value, propertyName, value))\n            {\n                return true;\n            }\n        }\n    }\n    else if (token is JArray array)\n    {\n        foreach (var item in array)\n        {\n            if (FindPropertyWithValue(item, propertyName, value))\n            {\n                return true;\n            }\n        }\n    }\n    \n    return false;\n}\n\nprivate static async Task StopVirtualMachine(string subscriptionId, string resourceGroup, string vmName, \n    string accessToken, ILogger log)\n{\n    try\n    {\n        string url = $\"https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/virtualMachines/{vmName}/deallocate?api-version=2023-03-01\";\n        \n        using (var client = new HttpClient())\n        {\n            using (var request = new HttpRequestMessage(HttpMethod.Post, url))\n            {\n                request.Headers.Authorization = new AuthenticationHeaderValue(\"Bearer\", accessToken);\n                \n                var response = await client.SendAsync(request);\n                string content = await response.Content.ReadAsStringAsync();\n                \n                if (response.IsSuccessStatusCode)\n                {\n                    log.LogInformation($\"Successfully initiated VM {vmName} stop operation\");\n                }\n                else\n                {\n                    log.LogError($\"Failed to stop VM: {response.StatusCode}, {content}\");\n                }\n            }\n        }\n    }\n    catch (Exception ex)\n    {\n        log.LogError($\"Error stopping VM: {ex.Message}\");\n    }\n}",
                    "function.proj": "<Project Sdk=\"Microsoft.NET.Sdk\">\n  <PropertyGroup>\n    <TargetFramework>netstandard2.0</TargetFramework>\n  </PropertyGroup>\n  <ItemGroup>\n    <PackageReference Include=\"Microsoft.NET.Sdk.Functions\" Version=\"3.0.13\" />\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"13.0.1\" />\n  </ItemGroup>\n</Project>"
                }
            }
        },
{
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2022-04-01",
            "name": "[variables('vmRoleAssignmentName')]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]",
                "[resourceId('Microsoft.Compute/virtualMachines', variables('vmName'))]"
            ],
            "properties": {
                "roleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', variables('roleDefinitionId'))]",
                "principalId": "[reference(resourceId('Microsoft.Web/sites', parameters('functionAppName')), '2022-03-01', 'full').identity.principalId]",
                "principalType": "ServicePrincipal"
            }
        },
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2022-04-01",
            "name": "[variables('caRoleAssignmentName')]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]",
                "[resourceId('Microsoft.App/containerApps', variables('appName'))]"
            ],
            "properties": {
                "roleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', variables('readerRoleDefinitionId'))]",
                "principalId": "[reference(resourceId('Microsoft.Web/sites', parameters('functionAppName')), '2022-03-01', 'full').identity.principalId]",
                "principalType": "ServicePrincipal"
            }
        }
    ]
}